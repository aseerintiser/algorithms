class Solution {
public:
    #define vv_iter vector<vector<int>>::iterator
    void merge_count(vv_iter l, vv_iter r, vector<int> &count)
    {
        if(r - l <= 1) return;
        vv_iter m = l + (r - l)/2;
        merge_count(l,m,count);
        merge_count(m,r,count);
        
        //Counting of pairs such that num[i] > num[j]
        
        vv_iter i = l;
        vv_iter j = m;
        for(vv_iter i = l, j = m; i < m; i++)
        {
            while(j<r and ((*i)[0] > (*j)[0]))  //nums[i] > nums[j], cant pass nums[] here
            {
                j++;
            }
            count[(*i)[1]] += j - m;  //1th index, bcz there we store count value
        }
        std::inplace_merge(l,m,r);
    }
    
    vector<int> countSmaller(vector<int> &nums) {
        
        vector<vector<int>> temp;
        
         for(int i =0; i < nums.size(); i++)
         {
             temp.push_back(vector<int>({nums[i],i}));
         }
        
        vector<int> count (nums.size(),0);
        
        merge_count(temp.begin(),temp.end(),count);
        
        return count;
                            
    }
};